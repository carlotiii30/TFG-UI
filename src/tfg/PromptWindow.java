package tfg;

import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import jmr.descriptor.generated.AbstractPromptImageDescriptor;
import jmr.descriptor.generated.PromptGeneratedImageDescriptor;
import jmr.descriptor.generated.PromptGeneratedImageDescriptorLocal;

/**
 * This class represents a window that allows the user to input a text prompt,
 * generate an image using a generative model, and preview the generated image.
 * It integrates into the main application frame and displays the result both in
 * a preview panel and as a new internal image window.
 *
 * A default placeholder image is shown until an image is generated.
 *
 * @author Carlota de la Vega
 */
public class PromptWindow extends JInternalFrame {

    private static final Dimension dim = new Dimension(300, 400);

    private final MainWindow parent;

    /**
     * Creates a new PromptWindow associated with a given parent window. This
     * constructor initializes the GUI components and links the generated images
     * to the provided MainWindow for internal visualization.
     *
     * @param parent The MainWindow that will act as the parent container for
     * displaying generated results.
     */
    public PromptWindow(MainWindow parent) {
        this.parent = parent;
        initComponents();
        setPreferredSize(dim);

        if (parent != null) {
            int parentWidth = parent.getWidth();
            int parentHeight = parent.getHeight();
            int x = (parentWidth - getWidth()) / 2;
            int y = (parentHeight - getHeight()) / 2;
            setLocation(Math.max(x, 0), Math.max(y, 0));
        } else {
            setLocation(100, 100);
        }

        try {
            BufferedImage defaultImg = javax.imageio.ImageIO.read(getClass().getResource("/images/default.png"));
            imagePanel.setImage(defaultImg);
            imagePanel.repaint();
        } catch (IOException e) {
            System.err.println("Failed to load default image: " + e.getMessage());
        }

        pack();
        splitPanel.setResizeWeight(0.8);
    }

    /**
     * Default constructor for PromptWindow. This is used primarily when no
     * parent window is available or required. Internally delegates to the main
     * constructor with a null parent.
     */
    public PromptWindow() {
        this(null);
    }

    /**
     * Returns the current generated image shown in the image panel.
     *
     * @return BufferedImage currently displayed, or null if none.
     */
    public BufferedImage getImage() {
        return imagePanel.getImage();
    }

    /**
     * Triggers generation of the descriptor from the prompt text.
     *
     * @return A valid descriptor or null if generation failed.
     */
    private AbstractPromptImageDescriptor<?> generateDescriptor() {
        AbstractPromptImageDescriptor<?> descriptor = null;
        String description = this.textDescription.getText();

        if (description.isBlank()) {
            JOptionPane.showMessageDialog(this, "Please enter a prompt description.", "Missing Input", JOptionPane.WARNING_MESSAGE);
            return null;
        }

        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        try {
            if (parent.getOnlineAPImenu().isSelected()) {
                String token = parent.getCustomApiToken();
                if (token == null || token.isBlank()) {
                    JOptionPane.showMessageDialog(this, "API token is missing.", "Token Required", JOptionPane.WARNING_MESSAGE);
                    return null;
                }

                descriptor = new PromptGeneratedImageDescriptor(description, token);
            } else {
                descriptor = new PromptGeneratedImageDescriptorLocal(description);
            }

        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, "Error generating image from prompt.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            setCursor(java.awt.Cursor.getDefaultCursor());
        }

        return descriptor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsPanel = new javax.swing.JPanel();
        generateButton = new javax.swing.JButton();
        splitPanel = new javax.swing.JSplitPane();
        imagePanel = new tfg.ImagePanel();
        promptArea = new javax.swing.JScrollPane();
        textDescription = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMaximumSize(new java.awt.Dimension(1200, 1200));
        setPreferredSize(new java.awt.Dimension(300, 400));

        buttonsPanel.setLayout(new java.awt.BorderLayout());

        generateButton.setText("Visualize image");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(generateButton, java.awt.BorderLayout.CENTER);

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.PAGE_END);

        splitPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        imagePanel.setMaximumSize(new java.awt.Dimension(1000, 1000));
        imagePanel.setMinimumSize(new java.awt.Dimension(200, 200));
        imagePanel.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        splitPanel.setTopComponent(imagePanel);

        promptArea.setMaximumSize(new java.awt.Dimension(300, 300));
        promptArea.setMinimumSize(new java.awt.Dimension(10, 10));
        promptArea.setPreferredSize(new java.awt.Dimension(300, 300));

        textDescription.setColumns(20);
        textDescription.setRows(5);
        textDescription.setMaximumSize(new java.awt.Dimension(200, 200));
        textDescription.setPreferredSize(new java.awt.Dimension(100, 100));
        promptArea.setViewportView(textDescription);

        splitPanel.setBottomComponent(promptArea);

        getContentPane().add(splitPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        AbstractPromptImageDescriptor<?> descriptor = generateDescriptor();

        if (descriptor != null && descriptor.getGeneratedImage() != null) {
            try {
                BufferedImage img = descriptor.getGeneratedImage();
                imagePanel.setImage(img);
                imagePanel.repaint();

                String prompt = this.textDescription.getText();
                parent.addToHistory(img, prompt);

                String safePrompt = prompt.replaceAll("\\s+", "_").replaceAll("[^a-zA-Z0-9_]", "");
                File outFile = new File("generated_images/" + safePrompt + "_" + java.util.UUID.randomUUID() + ".png");
                outFile.getParentFile().mkdirs();
                javax.imageio.ImageIO.write(img, "png", outFile);
                java.net.URL fileURL = outFile.toURI().toURL();

                InternalWindow vi = new InternalWindow(parent, img, fileURL);
                vi.setTitle("Generated: " + prompt);
                parent.showInternalWindow(vi);

            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error saving or showing generated image.", "IO Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_generateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton generateButton;
    private tfg.ImagePanel imagePanel;
    private javax.swing.JScrollPane promptArea;
    private javax.swing.JSplitPane splitPanel;
    private javax.swing.JTextArea textDescription;
    // End of variables declaration//GEN-END:variables
}
